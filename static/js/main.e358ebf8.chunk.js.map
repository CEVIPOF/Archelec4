{"version":3,"sources":["helpers.js","data.js","Form.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["cleanStr","str","toLowerCase","replace","dataMock","name","job","initialState","Form","state","handleChange","event","target","value","setState","submitForm","props","handleSubmit","this","htmlFor","type","id","onChange","selected","onClick","Component","TableHeader","TableBody","rows","data","map","row","index","key","Table","App","formData","loadedData","search","keys","Object","filter","obj","undefined","find","objectValue","filterValue","length","includes","filterData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yMAKaA,EAAW,SAAAC,GACnB,OAAOA,EAAIC,cACVC,QAAQ,oBAAS,MCPVC,EAAW,CAAC,CACrBC,KAAM,YACNC,IAAK,cACN,CACCD,KAAM,OACNC,IAAK,SACN,CACAD,KAAM,OACNC,IAAK,e,OCNFC,EAAe,CACjBF,KAAM,GACNC,IAAK,IA6CME,E,4MAxCXC,MAAQF,E,EAERG,aAAe,SAAAC,GAAU,IAAD,EACIA,EAAMC,OAAtBP,EADY,EACZA,KAAMQ,EADM,EACNA,MACd,EAAKC,SAAL,eACKT,EAAQQ,K,EAIjBE,WAAa,WACX,EAAKC,MAAMC,aAAa,EAAKR,OAC7B,EAAKK,SAASP,I,uDAGN,IAAD,EACiBW,KAAKT,MADtB,EACGJ,KADH,EACSC,IACd,OACI,8BACI,2BAAOa,QAAQ,QAAf,QACA,4BAAQC,KAAK,OAAOf,KAAK,OAAOgB,GAAG,OAAOR,MAAOK,KAAKT,MAAMJ,KAAMiB,SAAUJ,KAAKR,cAC5E,4BAAQa,UAAQ,EAACV,MAAO,OACxB,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,SAGL,2BAAOM,QAAQ,OAAf,OACA,4BAAQC,KAAK,OAAOf,KAAK,MAAMgB,GAAG,MAAMR,MAAOK,KAAKT,MAAMH,IAAKgB,SAAUJ,KAAKR,cACzE,4BAAQa,UAAQ,EAACV,MAAO,OACxB,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,aAAd,cAGL,2BAAOO,KAAK,SAASP,MAAM,SAASW,QAASN,KAAKH,kB,GApC/CU,aCLbC,EAAc,WAClB,OACE,+BACE,4BACE,oCACA,sCAMFC,EAAY,SAAAX,GAChB,IAAMY,EAAOZ,EAAMa,KAAKC,KAAI,SAACC,EAAKC,GAChC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAI1B,MACT,4BAAK0B,EAAIzB,SAKf,OAAO,+BAAQsB,IAaFM,EAVD,SAAClB,GAAW,IAChBa,EAASb,EAATa,KACN,OACE,+BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWA,KAAMA,MCEZM,E,4MA1BX1B,MAAQ,CACJ2B,SAAU,GACVC,WAAYjC,G,EAGhBa,aAAe,SAAAqB,GACX,EAAKxB,SAAS,CAAEsB,SAAUE,K,uDAGpB,IAAD,EAC4BpB,KAAKT,MAEhCoB,EJTa,SAACO,EAAUP,GACjC,IAAMU,EAAOC,OAAOD,KAAKH,GAczB,OAZqBP,EAAKY,QAAO,SAACC,GAS/B,YAAuBC,IARHJ,EAAKK,MAAK,SAAAX,GAC1B,IAAMY,EAAc7C,EAAU0C,EAAIT,IAC5Ba,EAAc9C,EAAUoC,EAASH,IACvC,SAAKa,EAAYC,SAAUF,EAAYG,SAAUF,UIExCG,CAHR,EACGb,SADH,EACaC,YAIlB,OACI,6BACI,oDACA,kBAAC,EAAD,CAAMpB,aAAcC,KAAKD,eAEzB,4CACA,kBAAC,EAAD,CAAOY,KAAMA,S,GArBXJ,aCMEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e358ebf8.chunk.js","sourcesContent":["/*  This file contains a few handy function that are used\n    all around the app.\n*/\n\n\nexport const cleanStr = str => {\n     return str.toLowerCase()\n     .replace(/éèêë/g, 'e');\n}\n\n export const filterData = (formData, data) => {\n     const keys = Object.keys(formData);\n\n     const filteredData = data.filter((obj) => {\n        const matchingKey = keys.find(key => {\n            const objectValue = cleanStr( obj[key] );\n            const filterValue = cleanStr( formData[key] );\n            if ( filterValue.length && objectValue.includes( filterValue ) ) {\n                return true;\n            }\n            return false;\n        });\n        return matchingKey !== undefined;\n     });\n\n     return filteredData;\n }\n","export const dataMock = [{\n    name: 'testounet',\n    job: 'conseiller'\n}, {\n    name: 'toto',\n    job: 'maire'\n}, {\n   name: 'toto',\n   job: 'conseiller'\n}];\n","import React, { Component } from 'react';\n\nconst initialState = {\n    name: '',\n    job: ''\n}\n\nclass Form extends Component {\n\n    state = initialState\n\n    handleChange = event => {\n        const { name, value } = event.target;\n        this.setState({\n            [name] : value\n        });\n    }\n\n    submitForm = () => {\n      this.props.handleSubmit(this.state);\n      this.setState(initialState)\n    }\n\n    render() {\n        const { name, job } = this.state;\n        return (\n            <form>\n                <label htmlFor=\"name\">Name</label>\n                <select type=\"text\" name=\"name\" id=\"name\" value={this.state.name} onChange={this.handleChange}>\n                     <option selected value={null}></option>\n                     <option value=\"testounet\">testounet</option>\n                     <option value=\"toto\">toto</option>\n                     <option value=\"test\">test</option>\n                </select>\n\n                <label htmlFor=\"job\">Job</label>\n                <select type=\"text\" name=\"job\" id=\"job\" value={this.state.job} onChange={this.handleChange}>\n                     <option selected value={null}></option>\n                     <option value=\"conseiller\">conseiller</option>\n                     <option value=\"maire\">maire</option>\n                     <option value=\"president\">president</option>\n                </select>\n\n                <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n            </form>\n        )\n    }\n}\n\nexport default Form;\n","import React from 'react'\n\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Job</th>\n      </tr>\n    </thead>\n  );\n}\n\nconst TableBody = props => {\n  const rows = props.data.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n      </tr>\n    );\n  });\n\n  return <tbody>{rows}</tbody>;\n}\n\nconst Table = (props) => {\n  const { data } = props;\n    return (\n      <table>\n          <TableHeader />\n          <TableBody data={data} />\n      </table>\n    );\n}\n\nexport default Table;\n","import React, { Component } from 'react'\nimport { filterData } from './helpers'\nimport { dataMock } from './data'\nimport Form from './Form'\nimport Table from './Table'\n\nclass App extends Component {\n    state = {\n        formData: {},\n        loadedData: dataMock\n    }\n\n    handleSubmit = search => {\n        this.setState({ formData: search });\n    }\n\n    render() {\n        const { formData, loadedData } = this.state;\n\n        const data = filterData(formData, loadedData);\n\n        return (\n            <div>\n                <h1>Recherche avancée</h1>\n                <Form handleSubmit={this.handleSubmit} />\n\n                <h1>Résultats</h1>\n                <Table data={data} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}